{"version":3,"sources":["components/UserSettings/index.tsx","utils/index.ts","components/Legend/index.tsx","components/Loader/index.tsx","components/AreaDetails/index.tsx","services/geoJsonData.ts","components/Map/index.tsx","components/Footer/index.tsx","components/App.tsx","index.tsx"],"names":["UserSettings","areaLevel","setAreaLevel","updateGeoJsonData","industry","setIndustry","industryRef","areaLevels","name","value","className","onChange","e","newAreaLevel","Number","target","map","level","find","areaObj","newIndustry","current","group","idx","x","toString","replace","Legend","interpolations","numbers","colors","val","i","push","id","business","style","backgroundColor","utils","Loader","index","area","setSelectedArea","filteredProperties","Object","keys","properties","filter","key","onClick","property","getData","a","axios","post","process","res","data","geoJsonDataService","mapboxgl","workerClass","require","default","accessToken","Map","mapContainerRef","useRef","hoveredAreaRef","mapObjectRef","useState","geoJsonData","setGeoJsonData","colourInterpolations","setColourInterpolations","isLoading","setLoading","selectedArea","_map","getSource","setData","useEffect","newMaxBusinesses","features","reduce","prev","cur","interpolationDistance","Math","ceil","round","newInterpolations","el","setPaintProperty","container","center","zoom","addControl","NavigationControl","on","addSource","type","generateId","addLayer","source","layout","paint","popup","Popup","closeButton","closeOnClick","length","setFeatureState","hover","_hoveredArea","getCanvas","cursor","coordinates","lngLat","popupData","setLngLat","setHTML","addTo","remove","ref","Footer","rel","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6de55746.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./UserSettings.css\";\r\n\r\ninterface Props {\r\n  areaLevel: number;\r\n  setAreaLevel: (value: React.SetStateAction<number>) => void;\r\n  updateGeoJsonData: (newAreaLevel: number) => void;\r\n  industry: string;\r\n  setIndustry: React.Dispatch<React.SetStateAction<string>>;\r\n  mapObjectRef: React.MutableRefObject<mapboxgl.Map>;\r\n  industryRef: React.MutableRefObject<string>;\r\n}\r\n\r\nconst UserSettings = ({\r\n  areaLevel,\r\n  setAreaLevel,\r\n  updateGeoJsonData,\r\n  industry,\r\n  setIndustry,\r\n  industryRef,\r\n}: Props) => {\r\n  const areaLevels = [\r\n    {\r\n      name: \"Country\",\r\n      value: 4,\r\n    },\r\n    {\r\n      name: \"Region\",\r\n      value: 5,\r\n    },\r\n    {\r\n      name: \"County\",\r\n      value: 6,\r\n    },\r\n    {\r\n      name: \"District\",\r\n      value: 7,\r\n    },\r\n  ];\r\n\r\n  const industryGroups = [\r\n    \"01-03 : Agriculture, forestry & fishing\",\r\n    \"05-39 : Production\",\r\n    \"41-43 : Construction\",\r\n    \"45 : Motor trades\",\r\n    \"46 : Wholesale\",\r\n    \"47 : Retail\",\r\n    \"49-53 : Transport & Storage (inc postal)\",\r\n    \"55-56 : Accommodation & food services\",\r\n    \"58-63 : Information & communication\",\r\n    \"64-66 : Finance & insurance\",\r\n    \"68 : Property\",\r\n    \"69-75 : Professional, scientific & technical\",\r\n    \"77-82 : Business administration & support services\",\r\n    \"84 : Public administration & defence\",\r\n    \"85 : Education\",\r\n    \"86-88 : Health\",\r\n    \"90-99 : Arts, entertainment, recreation & other services\",\r\n  ];\r\n\r\n  const handleAreaLevelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const newAreaLevel = Number(e.target.value);\r\n    setAreaLevel(newAreaLevel);\r\n    updateGeoJsonData(newAreaLevel);\r\n  };\r\n\r\n  const handleIndustryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    // update fill-color and popup data when industry changes\r\n    const newIndustry = e.target.value;\r\n    setIndustry(newIndustry);\r\n    industryRef.current = newIndustry;\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebarStyle\">\r\n      <h2>\r\n        <u>💵 UK Business Activity Visualiser</u>\r\n      </h2>\r\n      <p>\r\n        Select an area to display information about its business enterprises\r\n      </p>\r\n\r\n      <div>\r\n        <p>\r\n          Select level{\" \"}\r\n          <select onChange={handleAreaLevelChange}>\r\n            {areaLevels.map((level) => (\r\n              <option key={level.value} value={level.value}>\r\n                {level.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </p>\r\n        <p>\r\n          Current level:{\" \"}\r\n          {areaLevels.find((areaObj) => areaObj.value === areaLevel).name}\r\n        </p>\r\n\r\n        <p>\r\n          Select industry{\" \"}\r\n          <select onChange={handleIndustryChange}>\r\n            {industryGroups.map((group: string, idx: number) => (\r\n              <option key={idx} value={group}>\r\n                {group}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </p>\r\n        <p>Current industry: {industry}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSettings;\r\n","const numberWithCommas = (x: number) => {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nexport default { numberWithCommas };\n","import React from \"react\";\nimport \"./Legend.css\";\nimport utils from \"../../utils\";\n\ninterface Props {\n  interpolations: (string | number)[];\n}\n\nconst Legend = ({ interpolations }: Props) => {\n  const numbers: number[] = [];\n  const colors: string[] = [];\n\n  interpolations.map((val, i) => {\n    if (i % 2 === 0) {\n      numbers.push(val as number);\n    } else colors.push(val as string);\n  });\n\n  return (\n    <div id=\"legend\">\n      {numbers.map((business, i) => {\n        return (\n          <div key={i}>\n            <span className=\"legend-key\" style={{ backgroundColor: colors[i] }}>\n              {\" \"}\n            </span>\n            <span>{utils.numberWithCommas(business)}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\nimport \"./Loader.css\";\n\nconst Loader = () => {\n  return <div className=\"loader\"></div>;\n};\n\nexport default Loader;\n","import { MapboxGeoJSONFeature } from \"mapbox-gl\";\nimport React from \"react\";\nimport \"./AreaDetails.css\";\nimport utils from \"../../utils\";\n\ninterface Props {\n  area: MapboxGeoJSONFeature;\n  setSelectedArea: React.Dispatch<mapboxgl.MapboxGeoJSONFeature>;\n}\n\nconst index = ({ area, setSelectedArea }: Props) => {\n  // Remove the name and id from the properties object\n  const filteredProperties = Object.keys(area.properties).filter(\n    (key) => key !== \"name\" && key !== \"id\"\n  );\n\n  return (\n    <div className=\"area-details\">\n      <h2>\n        <u>📍 {area.properties.name}</u>\n        <button\n          className=\"close-button\"\n          onClick={() => setSelectedArea(null)}\n        >X</button>\n      </h2>\n      <table>\n        {filteredProperties.map((property) => {\n          return (\n            <tr key={property}>\n              <td>{property}</td>\n              <td>{utils.numberWithCommas(area.properties[property])}</td>\n            </tr>\n          );\n        })}\n      </table>\n    </div>\n  );\n};\n\nexport default index;\n","import axios, { AxiosResponse } from \"axios\";\r\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\r\n\r\ninterface GeoCodesResponseType {\r\n  message: string;\r\n  data:\r\n    | GeoJSON.Feature<GeoJSON.Geometry>\r\n    | GeoJSON.FeatureCollection<GeoJSON.Geometry>\r\n    | string;\r\n}\r\n\r\nconst getData = async (level: number) => {\r\n  const res: AxiosResponse<GeoCodesResponseType, string> = await axios.post(\r\n    `${baseUrl}/api/geocodes`,\r\n    {\r\n      level: level,\r\n    }\r\n  );\r\n  return res.data.data;\r\n};\r\n\r\nconst geoJsonDataService = { getData };\r\n\r\nexport default geoJsonDataService;\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"./Map.css\";\r\nimport UserSettings from \"../UserSettings\";\r\nimport Legend from \"../Legend\";\r\nimport Loader from \"../Loader\";\r\nimport AreaDetails from \"../AreaDetails\";\r\nimport geoJsonDataService from \"../../services/geoJsonData\";\r\nimport utils from \"../../utils\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\nmapboxgl.workerClass =\r\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n  require(\"worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker\").default;\r\n\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\r\n\r\nconst Map = () => {\r\n  const mapContainerRef: React.MutableRefObject<HTMLDivElement> = useRef(null); // used to create the map on page load\r\n  const hoveredAreaRef: React.MutableRefObject<string | number> = useRef(null); // used to create the popup hover effect\r\n  const mapObjectRef = useRef(null); // stores the map object\r\n\r\n  const [areaLevel, setAreaLevel]: [\r\n    number,\r\n    React.Dispatch<React.SetStateAction<number>>\r\n  ] = useState(4); // country(4), region(5), county(6), district(7)\r\n\r\n  const [industry, setIndustry]: [\r\n    string,\r\n    React.Dispatch<React.SetStateAction<string>>\r\n  ] = useState(\"01-03 : Agriculture, forestry & fishing\"); // broad industry groups\r\n\r\n  const industryRef: React.MutableRefObject<string> = useRef(industry); // used in mousemove callback to always uses the latest industry\r\n\r\n  const [geoJsonData, setGeoJsonData] = useState(null); // data from server\r\n\r\n  const [colourInterpolations, setColourInterpolations] = useState([\r\n    500,\r\n    \"#4976b5\",\r\n    1000,\r\n    \"#49a9bf\",\r\n    5000,\r\n    \"#49c7ad\",\r\n    10000,\r\n    \"#4ad07e\",\r\n    15000,\r\n    \"#4dd74b\",\r\n    20000,\r\n    \"#88df4d\",\r\n    25000,\r\n    \"#c8e64f\",\r\n    100000,\r\n    \"#eccd52\",\r\n    300000,\r\n    \"#f29455\",\r\n    500000,\r\n    \"#f75959\",\r\n  ]);\r\n\r\n  const [isLoading, setLoading]: [\r\n    boolean,\r\n    React.Dispatch<React.SetStateAction<boolean>>\r\n  ] = useState(false); // used to render the loader component\r\n\r\n  const [selectedArea, setSelectedArea]: [\r\n    mapboxgl.MapboxGeoJSONFeature,\r\n    React.Dispatch<mapboxgl.MapboxGeoJSONFeature>\r\n  ] = useState(null); // populated when a user clicks on an area\r\n\r\n  // callback function to get geoJSON data from server\r\n  // updates the map source with the new geoJSON data\r\n  const updateGeoJsonData = async (newAreaLevel: number) => {\r\n    setLoading(true);\r\n    const data = await geoJsonDataService.getData(newAreaLevel);\r\n    setGeoJsonData(data);\r\n    if (mapObjectRef.current) {\r\n      const _map = mapObjectRef.current;\r\n      if (_map.getSource(\"countries-source\")) {\r\n        _map.getSource(\"countries-source\").setData(data);\r\n      }\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  // Update the colour scale based on the max number of businesses\r\n  useEffect(() => {\r\n    if (geoJsonData) {\r\n      const newMaxBusinesses = geoJsonData.features.reduce((prev, cur) =>\r\n        prev.properties[industry] > cur.properties[industry] ? prev : cur\r\n      ).properties[industry];\r\n\r\n      const interpolationDistance =\r\n        Math.ceil(Math.round(newMaxBusinesses / 9) / 100) * 100;\r\n\r\n      const newInterpolations = colourInterpolations.map((el, idx) =>\r\n        idx % 2 === 0 ? (idx / 2) * interpolationDistance : el\r\n      );\r\n\r\n      setColourInterpolations(newInterpolations);\r\n\r\n      mapObjectRef.current.setPaintProperty(\"countries-layer\", \"fill-color\", [\r\n        \"interpolate\",\r\n        [\"linear\"],\r\n        [\"get\", industry],\r\n        ...newInterpolations,\r\n      ]);\r\n    }\r\n  }, [geoJsonData, industry]);\r\n\r\n  // Runs on page load\r\n  // Sets up the map source and layer and related callback functions\r\n  useEffect(() => {\r\n    const map = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: \"mapbox://styles/mapbox/dark-v10\",\r\n      center: [-3.0803, 55.7186],\r\n      zoom: 5,\r\n    });\r\n    mapObjectRef.current = map;\r\n\r\n    // Add navigation control (the +/- zoom buttons)\r\n    map.addControl(new mapboxgl.NavigationControl(), \"top-right\");\r\n\r\n    map.on(\"load\", () => {\r\n      updateGeoJsonData(areaLevel);\r\n\r\n      // Add the geoJSON data as a source and layer\r\n      map.addSource(\"countries-source\", {\r\n        type: \"geojson\",\r\n        data: geoJsonData as\r\n          | GeoJSON.Feature<GeoJSON.Geometry>\r\n          | GeoJSON.FeatureCollection<GeoJSON.Geometry>\r\n          | string,\r\n        generateId: true,\r\n      });\r\n\r\n      map.addLayer({\r\n        id: \"countries-layer\",\r\n        type: \"fill\",\r\n        source: \"countries-source\",\r\n        layout: {},\r\n        paint: {\r\n          \"fill-color\": [\r\n            \"interpolate\",\r\n            [\"linear\"],\r\n            [\"get\", industry],\r\n            ...colourInterpolations,\r\n          ],\r\n          \"fill-outline-color\": \"#FFFFFF\",\r\n          \"fill-opacity\": [\r\n            \"case\",\r\n            [\"boolean\", [\"feature-state\", \"hover\"], false],\r\n            0.9,\r\n            0.5,\r\n          ],\r\n        },\r\n      });\r\n\r\n      // Create a popup but don't add it to the map yet.\r\n      const popup = new mapboxgl.Popup({\r\n        closeButton: false,\r\n        closeOnClick: false,\r\n      });\r\n\r\n      map.on(\"mousemove\", \"countries-layer\", (e) => {\r\n        if (e.features.length > 0) {\r\n          // When the user moves their mouse over an area, we'll update the\r\n          // feature state for the feature under the mouse.\r\n          if (hoveredAreaRef.current > -1) {\r\n            map.setFeatureState(\r\n              { source: \"countries-source\", id: hoveredAreaRef.current },\r\n              { hover: false }\r\n            );\r\n          }\r\n\r\n          const _hoveredArea = e.features[0].id;\r\n          map.setFeatureState(\r\n            { source: \"countries-source\", id: _hoveredArea },\r\n            { hover: true }\r\n          );\r\n\r\n          hoveredAreaRef.current = _hoveredArea;\r\n\r\n          // Change the cursor style as a UI indicator.\r\n          map.getCanvas().style.cursor = \"pointer\";\r\n\r\n          // Get the pointer coordinates\r\n          const coordinates: mapboxgl.LngLat = e.lngLat;\r\n\r\n          const popupData = `\r\n          <strong>${e.features[0].properties.name}</strong><br>\r\n          <div>${utils.numberWithCommas(\r\n            e.features[0].properties[industryRef.current]\r\n          )}</div>\r\n          `;\r\n\r\n          // Populate the popup and set its coordinates\r\n          // based on the feature found.\r\n          popup\r\n            .setLngLat(coordinates)\r\n            .setHTML(popupData)\r\n            .addTo(mapObjectRef.current);\r\n        }\r\n      });\r\n\r\n      map.on(\"mouseleave\", \"countries-layer\", () => {\r\n        // When the mouse leaves the state-fill layer, update the feature state of the\r\n        // previously hovered feature.\r\n        if (hoveredAreaRef.current > -1) {\r\n          map.setFeatureState(\r\n            { source: \"countries-source\", id: hoveredAreaRef.current },\r\n            { hover: false }\r\n          );\r\n        }\r\n        hoveredAreaRef.current = null;\r\n\r\n        // Remove the popup and reset the cursor\r\n        map.getCanvas().style.cursor = \"\";\r\n        popup.remove();\r\n      });\r\n\r\n      // When an area is clicked, save it to selectedArea to display in AreaDetails component\r\n      map.on(\"click\", \"countries-layer\", (e) => setSelectedArea(e.features[0]));\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <UserSettings\r\n        areaLevel={areaLevel}\r\n        setAreaLevel={setAreaLevel}\r\n        updateGeoJsonData={updateGeoJsonData}\r\n        industry={industry}\r\n        setIndustry={setIndustry}\r\n        mapObjectRef={mapObjectRef}\r\n        industryRef={industryRef}\r\n      />\r\n      <Legend interpolations={colourInterpolations} />\r\n      {isLoading && <Loader />}\r\n      {selectedArea && (\r\n        <AreaDetails area={selectedArea} setSelectedArea={setSelectedArea} />\r\n      )}\r\n      <div className=\"map-container\" ref={mapContainerRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      Developed by Joel Edwardson and Syed Taqi Haider, 2021. View the source on{\" \"}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n        href=\"https://github.com/syedtaqi95/business-activity-frontend\"\r\n      >\r\n        Github\r\n      </a>\r\n      .\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Map from \"./Map\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Map />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}