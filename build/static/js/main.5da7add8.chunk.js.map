{"version":3,"sources":["components/UserSettings/index.tsx","services/geoJsonData.ts","components/Map/index.tsx","components/Footer/index.tsx","components/App.tsx","index.tsx"],"names":["UserSettings","areaLevel","setAreaLevel","industry","setIndustry","areaLevels","name","value","className","onChange","e","Number","target","map","level","find","areaObj","group","idx","getData","a","axios","post","process","res","data","geoJsonDataService","mapboxgl","workerClass","require","default","accessToken","Map","mapContainerRef","useRef","hoveredAreaRef","mapRef","useState","industryRef","geoJsonData","setGeoJsonData","updateGeoJsonData","then","current","_map","getSource","setData","useEffect","container","style","center","zoom","addControl","NavigationControl","on","addSource","type","generateId","addLayer","id","source","layout","paint","popup","Popup","closeButton","closeOnClick","features","length","setFeatureState","hover","_hoveredArea","getCanvas","cursor","coordinates","lngLat","popupData","properties","toString","replace","setLngLat","setHTML","addTo","remove","getLayer","setPaintProperty","ref","Footer","rel","href","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5da7add8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface Props {\r\n  areaLevel: number;\r\n  setAreaLevel: React.Dispatch<React.SetStateAction<number>>;\r\n  industry: string;\r\n  setIndustry: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst UserSettings = ({\r\n  areaLevel,\r\n  setAreaLevel,\r\n  industry,\r\n  setIndustry,\r\n}: Props) => {\r\n  const areaLevels = [\r\n    {\r\n      name: \"Country\",\r\n      value: 4,\r\n    },\r\n    {\r\n      name: \"Region\",\r\n      value: 5,\r\n    },\r\n    {\r\n      name: \"County\",\r\n      value: 6,\r\n    },\r\n    {\r\n      name: \"District\",\r\n      value: 7,\r\n    },\r\n  ];\r\n\r\n  const industryGroups = [\r\n    \"01-03 : Agriculture, forestry & fishing\",\r\n    \"05-39 : Production\",\r\n    \"41-43 : Construction\",\r\n    \"45 : Motor trades\",\r\n    \"46 : Wholesale\",\r\n    \"47 : Retail\",\r\n    \"49-53 : Transport & Storage (inc postal)\",\r\n    \"55-56 : Accommodation & food services\",\r\n    \"58-63 : Information & communication\",\r\n    \"64-66 : Finance & insurance\",\r\n    \"68 : Property\",\r\n    \"69-75 : Professional, scientific & technical\",\r\n    \"77-82 : Business administration & support services\",\r\n    \"84 : Public administration & defence\",\r\n    \"85 : Education\",\r\n    \"86-88 : Health\",\r\n    \"90-99 : Arts, entertainment, recreation & other services\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"sidebarStyle\">\r\n      <h2>ðŸ’µ UK Business Activity Visualiser</h2>\r\n      <p>\r\n        Select an area to display information about its business enterprises\r\n      </p>\r\n\r\n      <div>\r\n        <p>\r\n          Select level{\" \"}\r\n          <select onChange={(e) => setAreaLevel(Number(e.target.value))}>\r\n            {areaLevels.map((level) => (\r\n              <option key={level.value} value={level.value}>\r\n                {level.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </p>\r\n        <p>\r\n          Current level:{\" \"}\r\n          {areaLevels.find((areaObj) => areaObj.value === areaLevel).name}\r\n        </p>\r\n\r\n        <p>\r\n          Select industry{\" \"}\r\n          <select onChange={(e) => setIndustry(e.target.value)}>\r\n            {industryGroups.map((group: string, idx: number) => (\r\n              <option key={idx} value={group}>\r\n                {group}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </p>\r\n        <p>Current industry: {industry}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserSettings;\r\n","import axios, { AxiosResponse } from \"axios\";\r\nconst baseUrl = process.env.REACT_APP_BACKEND_URL;\r\n\r\ninterface GeoCodesResponse {\r\n  message: string;\r\n  data:\r\n    | GeoJSON.Feature<GeoJSON.Geometry>\r\n    | GeoJSON.FeatureCollection<GeoJSON.Geometry>\r\n    | string;\r\n}\r\n\r\nconst getData = async (level: number) => {\r\n  const res: AxiosResponse<GeoCodesResponse, string> = await axios.post(\r\n    `${baseUrl}/api/geocodes`,\r\n    {\r\n      level: level,\r\n    }\r\n  );\r\n  return res.data.data;\r\n};\r\n\r\nconst geoJsonDataService = { getData };\r\n\r\nexport default geoJsonDataService;\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"./Map.css\";\r\nimport UserSettings from \"../UserSettings\";\r\nimport geoJsonDataService from \"../../services/geoJsonData\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-ignore\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nmapboxgl.workerClass = require('worker-loader!mapbox-gl/dist/mapbox-gl-csp-worker').default;\r\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\r\n\r\nconst Map = () => {\r\n  const mapContainerRef = useRef(null); // used to create the map on page load\r\n\r\n  const hoveredAreaRef = useRef(null); // used to create the popup hover effect\r\n\r\n  const mapRef = useRef(null); // stores the map object\r\n\r\n  const [areaLevel, setAreaLevel]: [\r\n    number,\r\n    React.Dispatch<React.SetStateAction<number>>\r\n  ] = useState(4); // country(4), region(5), county(6), district(7)\r\n\r\n  const [industry, setIndustry]: [\r\n    string,\r\n    React.Dispatch<React.SetStateAction<string>>\r\n  ] = useState(\"01-03 : Agriculture, forestry & fishing\"); // broad industry groups\r\n\r\n  const industryRef = useRef(industry); // used in mousemove callback to always uses the latest industry\r\n\r\n  const [geoJsonData, setGeoJsonData] = useState(null); // data from server\r\n\r\n  const numberWithCommas = (x: number) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  };\r\n\r\n  // callback function to get geoJSON data from server\r\n  // updates the map source with the new geoJSON data\r\n  const updateGeoJsonData = () => {\r\n    geoJsonDataService.getData(areaLevel).then((data) => {\r\n      setGeoJsonData(data);\r\n\r\n      if (mapRef.current) {\r\n        const _map = mapRef.current;\r\n        if (_map.getSource(\"countries-source\")) {\r\n          _map.getSource(\"countries-source\").setData(data);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  // Runs on page load\r\n  // Sets up the map source and layer and related callback functions\r\n  useEffect(() => {\r\n    const map = new mapboxgl.Map({\r\n      container: mapContainerRef.current,\r\n      style: \"mapbox://styles/mapbox/dark-v10\",\r\n      center: [-3.0803, 55.7186],\r\n      zoom: 5,\r\n    });\r\n    mapRef.current = map;\r\n\r\n    // Add navigation control (the +/- zoom buttons)\r\n    map.addControl(new mapboxgl.NavigationControl(), \"top-right\");\r\n\r\n    map.on(\"load\", () => {\r\n      updateGeoJsonData();\r\n\r\n      // Add the geoJSON data as a source and layer\r\n      map.addSource(\"countries-source\", {\r\n        type: \"geojson\",\r\n        data: geoJsonData as\r\n          | GeoJSON.Feature<GeoJSON.Geometry>\r\n          | GeoJSON.FeatureCollection<GeoJSON.Geometry>\r\n          | string,\r\n        generateId: true,\r\n      });\r\n\r\n      map.addLayer({\r\n        id: \"countries-layer\",\r\n        type: \"fill\",\r\n        source: \"countries-source\",\r\n        layout: {},\r\n        paint: {\r\n          \"fill-color\": [\r\n            \"interpolate\",\r\n            [\"linear\"],\r\n            [\"get\", industry],\r\n            0,\r\n            \"#f75959\",\r\n            250,\r\n            \"#f47657\",\r\n            500,\r\n            \"#f29455\",\r\n            750,\r\n            \"#efb054\",\r\n            1000,\r\n            \"#eccd52\",\r\n            2500,\r\n            \"#e9e851\",\r\n            5000,\r\n            \"#c8e64f\",\r\n            7500,\r\n            \"#a8e24e\",\r\n            10000,\r\n            \"#88df4d\",\r\n            12500,\r\n            \"#6adb4c\",\r\n            15000,\r\n            \"#4dd74b\",\r\n            17500,\r\n            \"#4bd465\",\r\n            20000,\r\n            \"#4ad07e\",\r\n            22500,\r\n            \"#4acc96\",\r\n            25000,\r\n            \"#49c7ad\",\r\n            50000,\r\n            \"#49c3c2\",\r\n            100000,\r\n            \"#49a9bf\",\r\n            200000,\r\n            \"#498fba\",\r\n            300000,\r\n            \"#4976b5\",\r\n            400000,\r\n            \"#4b61af\",\r\n            500000,\r\n            \"#4d4fa8\",\r\n          ],\r\n          \"fill-outline-color\": \"#FFFFFF\",\r\n          \"fill-opacity\": [\r\n            \"case\",\r\n            [\"boolean\", [\"feature-state\", \"hover\"], false],\r\n            0.9,\r\n            0.5,\r\n          ],\r\n        },\r\n      });\r\n\r\n      // Create a popup but don't add it to the map yet.\r\n      const popup = new mapboxgl.Popup({\r\n        closeButton: false,\r\n        closeOnClick: false,\r\n      });\r\n\r\n      map.on(\"mousemove\", \"countries-layer\", (e) => {\r\n        if (e.features.length > 0) {\r\n          // When the user moves their mouse over an area, we'll update the\r\n          // feature state for the feature under the mouse.\r\n          if (hoveredAreaRef.current > -1) {\r\n            map.setFeatureState(\r\n              { source: \"countries-source\", id: hoveredAreaRef.current },\r\n              { hover: false }\r\n            );\r\n          }\r\n\r\n          const _hoveredArea = e.features[0].id;\r\n          map.setFeatureState(\r\n            { source: \"countries-source\", id: _hoveredArea },\r\n            { hover: true }\r\n          );\r\n\r\n          hoveredAreaRef.current = _hoveredArea;\r\n\r\n          // Change the cursor style as a UI indicator.\r\n          map.getCanvas().style.cursor = \"pointer\";\r\n\r\n          // Get the pointer coordinates\r\n          const coordinates: mapboxgl.LngLat = e.lngLat;\r\n\r\n          const popupData = `\r\n          <strong>${e.features[0].properties.name}</strong><br>\r\n          <div>${numberWithCommas(\r\n            e.features[0].properties[industryRef.current]\r\n          )}</div>\r\n          `;\r\n\r\n          // Populate the popup and set its coordinates\r\n          // based on the feature found.\r\n          popup.setLngLat(coordinates).setHTML(popupData).addTo(mapRef.current);\r\n        }\r\n      });\r\n\r\n      map.on(\"mouseleave\", \"countries-layer\", () => {\r\n        // When the mouse leaves the state-fill layer, update the feature state of the\r\n        // previously hovered feature.\r\n        if (hoveredAreaRef.current > -1) {\r\n          map.setFeatureState(\r\n            { source: \"countries-source\", id: hoveredAreaRef.current },\r\n            { hover: false }\r\n          );\r\n        }\r\n        hoveredAreaRef.current = null;\r\n\r\n        // Remove the popup and reset the cursor\r\n        map.getCanvas().style.cursor = \"\";\r\n        popup.remove();\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  // Update geoJSON data when areaLevel changes\r\n  useEffect(() => {\r\n    updateGeoJsonData();\r\n  }, [areaLevel]);\r\n\r\n  // update fill-color and popup data when industry changes\r\n  useEffect(() => {\r\n    if (mapRef.current) {\r\n      const _map = mapRef.current;\r\n      if (_map.getLayer(\"countries-layer\")) {\r\n        _map.setPaintProperty(\"countries-layer\", \"fill-color\", [\r\n          \"interpolate\",\r\n          [\"linear\"],\r\n          [\"get\", industry],\r\n          0,\r\n          \"#f75959\",\r\n          250,\r\n          \"#f47657\",\r\n          500,\r\n          \"#f29455\",\r\n          750,\r\n          \"#efb054\",\r\n          1000,\r\n          \"#eccd52\",\r\n          2500,\r\n          \"#e9e851\",\r\n          5000,\r\n          \"#c8e64f\",\r\n          7500,\r\n          \"#a8e24e\",\r\n          10000,\r\n          \"#88df4d\",\r\n          12500,\r\n          \"#6adb4c\",\r\n          15000,\r\n          \"#4dd74b\",\r\n          17500,\r\n          \"#4bd465\",\r\n          20000,\r\n          \"#4ad07e\",\r\n          22500,\r\n          \"#4acc96\",\r\n          25000,\r\n          \"#49c7ad\",\r\n          50000,\r\n          \"#49c3c2\",\r\n          100000,\r\n          \"#49a9bf\",\r\n          200000,\r\n          \"#498fba\",\r\n          300000,\r\n          \"#4976b5\",\r\n          400000,\r\n          \"#4b61af\",\r\n          500000,\r\n          \"#4d4fa8\",\r\n        ]);\r\n      }\r\n    }\r\n\r\n    industryRef.current = industry;\r\n  }, [industry]);\r\n\r\n  return (\r\n    <div>\r\n      <UserSettings\r\n        areaLevel={areaLevel}\r\n        setAreaLevel={setAreaLevel}\r\n        industry={industry}\r\n        setIndustry={setIndustry}\r\n      />\r\n      <div className=\"map-container\" ref={mapContainerRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      Developed by Joel Edwardson and Syed Taqi Haider, 2021. View the source on{\" \"}\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n        href=\"https://github.com/syedtaqi95/business-activity-frontend\"\r\n      >\r\n        Github\r\n      </a>\r\n      .\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Map from \"./Map\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Map />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}